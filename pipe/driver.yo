                            | #######################################################################
                            | # Test for copying block of size K;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f42006000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2ffffffffffffffff | 	irmovq $K, %rdx		# src and dst have K elements
0x014: 30f69805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78805000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 802104000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Name: Li Muyu		ID: 1120200800
                            | # Describe how and why you modified the baseline code.
                            | # Description has been written in the experiment report. 
                            | # Written by fanese-myk, use iaddq, rearrange instruction to avoid load/use hazzard
                            | # use loop unrolling 5*1
                            | # make few changes from ver0.6 to make program run faster(avoid unpredicted branch)
                            | # Line 51 is fundamental
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = l len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
                            | 
0x03b: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx		# len < 10?
0x045: 720f02000000000000   | 	jl Root			# if so, goto Root:
                            | 
                            | 
0x04e: 50a70000000000000000 | Loop1:	mrmovq (%rdi), %r10	# read val from src...
0x058: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x062: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x06c: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x06e: 718100000000000000   | 	jle Loop2		# if so, goto Loop2:
0x077: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x081: 50a71000000000000000 | Loop2:	mrmovq 16(%rdi), %r10	# read val from src...
0x08b: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x095: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x097: 71aa00000000000000   | 	jle Loop3		# if so, goto Loop3:
0x0a0: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x0aa: 50b71800000000000000 | Loop3:	mrmovq 24(%rdi), %r11	# read val from src...
0x0b4: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0be: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0c0: 71d300000000000000   | 	jle Loop4		# if so, goto Loop4:
0x0c9: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x0d3: 50a72000000000000000 | Loop4:	mrmovq 32(%rdi), %r10	# read val from src...
0x0dd: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0e7: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0e9: 71fc00000000000000   | 	jle Loop5		# if so, goto Loop5:
0x0f2: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x0fc: 50b72800000000000000 | Loop5:	mrmovq 40(%rdi), %r11	# read val from src...
0x106: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x110: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x112: 712501000000000000   | 	jle Loop6		# if so, goto Loop6:
0x11b: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x125: 50a73000000000000000 | Loop6:	mrmovq 48(%rdi), %r10	# read val from src...
0x12f: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)	# ...and store it to dst
0x139: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x13b: 714e01000000000000   | 	jle Loop7		# if so, goto Loop7:
0x144: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x14e: 50b73800000000000000 | Loop7:	mrmovq 56(%rdi), %r11	# read val from src...
0x158: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x162: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x164: 717701000000000000   | 	jle Loop8		# if so, goto Loop8:
0x16d: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x177: 50a74000000000000000 | Loop8:	mrmovq 64(%rdi), %r10	# read val from src...
0x181: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# ...and store it to dst
0x18b: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x18d: 71a001000000000000   | 	jle Loop9		# if so, goto Loop9:
0x196: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x1a0: 50b74800000000000000 | Loop9:	mrmovq 72(%rdi), %r11	# read val from src...
0x1aa: 40a64000000000000000 | 	rmmovq %r10, 64(%rsi)	# ...and store it to dst
0x1b4: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1b6: 71c901000000000000   | 	jle Loop10		# if so, goto Loop10:
0x1bf: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x1c9:                      | Loop10:	#mrmovq 64(%rdi), %r10	# read val from src...
0x1c9: 40b64800000000000000 | 	rmmovq %r11, 72(%rsi)	# ...and store it to dst
0x1d3: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x1d5: 71e801000000000000   | 	jle Loop		# if so, goto Loop:
0x1de: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
                            | 
                            | 
                            | 
0x1e8:                      | Loop:
0x1e8: c0f75000000000000000 | 	iaddq $0x50, %rdi	# src++
0x1f2: c0f65000000000000000 | 	iaddq $0x50, %rsi	# dst++
0x1fc: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx		# len >= 10?
0x206: 754e00000000000000   | 	jge Loop1		# if so, goto Loop1:
0x20f:                      | Root:
0x20f: c0f20700000000000000 | 	iaddq	$7,%rdx		# len <= 3
0x219: 723402000000000000   | 	jl	Left
0x222: 765b02000000000000   | 	jg	Right	
0x22b: 739203000000000000   | 	je	Remain3		# len == 3 Middle
                            | 	
                            | 
0x234:                      | Left:
0x234: c0f20200000000000000 | 	iaddq	$2,%rdx		# len == 1
0x23e: 73e403000000000000   | 	je	Remain1
0x247: c0f2ffffffffffffffff | 	iaddq	$-1,%rdx	# len == 2
0x251: 73bb03000000000000   | 	je	Remain2
0x25a: 90                   | 	ret			# len == 0 
0x25b:                      | Right:
0x25b: c0f2fdffffffffffffff | 	iaddq	$-3,%rdx	# len <= 6 
0x265: 769302000000000000   | 	jg	RightRight
0x26e: 731703000000000000   | 	je	Remain6		# len == 6
0x277: c0f20100000000000000 | 	iaddq	$1,%rdx		# RightLeft
0x281: 734003000000000000   | 	je	Remain5		# len == 5
0x28a: 706903000000000000   | 	jmp	Remain4		# len == 4
                            | 	
0x293:                      | RightRight:
0x293: c0f2feffffffffffffff | 	iaddq	$-2,%rdx
0x29d: 72ee02000000000000   | 	jl	Remain7
0x2a6: 73c502000000000000   | 	je	Remain8
                            | 
0x2af:                      | Remain9:
0x2af: 50b74000000000000000 | 	mrmovq 64(%rdi), %r11	# read val from src...
0x2b9: 40b64000000000000000 | 	rmmovq %r11, 64(%rsi)
0x2c3: 62bb                 | 	andq %r11, %r11		# val <= 0?
                            | 
0x2c5:                      | Remain8:
0x2c5: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11	# read val from src...
0x2cf: 71e202000000000000   | 	jle Remain82		# if so, goto Npos:
0x2d8: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
                            | 
0x2e2:                      | Remain82:
                            | 	
0x2e2: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)
0x2ec: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x2ee:                      | Remain7:
0x2ee: 50b73000000000000000 | 	mrmovq 48(%rdi), %r11	# read val from src...
0x2f8: 710b03000000000000   | 	jle Remain72		# if so, goto Npos:
0x301: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x30b:                      | Remain72:
                            | 		
0x30b: 40b63000000000000000 | 	rmmovq %r11, 48(%rsi)
0x315: 62bb                 | 	andq %r11, %r11		# val <= 0?
                            | 
0x317:                      | Remain6:
0x317: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11	# read val from src...
0x321: 713403000000000000   | 	jle Remain62		# if so, goto Npos:
0x32a: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x334:                      | Remain62:
                            | 		
0x334: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)
0x33e: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x340:                      | Remain5:
0x340: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11	# read val from src...
0x34a: 715d03000000000000   | 	jle Remain52		# if so, goto Npos:
0x353: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x35d:                      | Remain52:
                            | 		
0x35d: 40b62000000000000000 | 	rmmovq %r11, 32(%rsi)
0x367: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x369:                      | Remain4:
0x369: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x373: 718603000000000000   | 	jle Remain42	# if so, goto Npos:
0x37c: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x386:                      | Remain42:
                            | 
0x386: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x390: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x392:                      | Remain3:
0x392: 50b71000000000000000 | 	mrmovq 16(%rdi), %r11	# read val from src...
0x39c: 71af03000000000000   | 	jle Remain32		# if so, goto Npos:
0x3a5: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x3af:                      | Remain32:
                            | 
0x3af: 40b61000000000000000 | 	rmmovq %r11, 16(%rsi)
0x3b9: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x3bb:                      | Remain2:
0x3bb: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x3c5: 71d803000000000000   | 	jle Remain22		# if so, goto Npos:
0x3ce: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x3d8:                      | Remain22:
                            | 
0x3d8: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x3e2: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x3e4:                      | Remain1:
0x3e4: 50b70000000000000000 | 	mrmovq (%rdi), %r11	# read val from src...
0x3ee: 710104000000000000   | 	jle Remain12		# if so, goto Npos:
0x3f7: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x401:                      | Remain12:
                            | 	
0x401: 40b60000000000000000 | 	rmmovq %r11, (%rsi)
0x40b: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x40d: 712004000000000000   | 	jle Done		# if so, goto Npos:
0x416: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x420:                      | Done:
0x420: 90                   | 	ret
                            | # Function epilogue.
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x421:                      | End:
                            | #/* $end ncopy-ys */
0x421:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x421:                      | check:
                            | 	# Return value test
0x421: 30fa0000000000000000 | 	irmovq $0,%r10
0x42b: 61a0                 | 	subq %r10,%rax
0x42d: 734904000000000000   | 	je checkb
0x436: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x440: 708705000000000000   | 	jmp cdone
0x449:                      | checkb:
                            | 	# Code length check
0x449: 30f02104000000000000 | 	irmovq EndFun,%rax
0x453: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x45d: 6120                 | 	subq %rdx,%rax
0x45f: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x469: 6102                 | 	subq %rax,%rdx
0x46b: 758704000000000000   | 	jge checkm
0x474: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x47e: 708705000000000000   | 	jmp cdone
0x487:                      | checkm:
0x487: 30f29805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x491: 30f38805000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x49b: 30f7ffffffffffffffff | 	irmovq $K,%rdi  # Count
0x4a5: 6277                 | 	andq %rdi,%rdi
0x4a7: 730505000000000000   | 	je checkpre         # Skip check if count = 0
0x4b0:                      | mcloop:
0x4b0: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x4ba: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x4c4: 6160                 | 	subq %rsi,%rax
0x4c6: 73e204000000000000   | 	je  mok
0x4cf: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x4d9: 708705000000000000   | 	jmp cdone
0x4e2:                      | mok:
0x4e2: 30f00800000000000000 | 	irmovq $8,%rax
0x4ec: 6002                 | 	addq %rax,%rdx	  # dest ++
0x4ee: 6003                 | 	addq %rax,%rbx    # src++
0x4f0: 30f00100000000000000 | 	irmovq $1,%rax
0x4fa: 6107                 | 	subq %rax,%rdi    # cnt--
0x4fc: 76b004000000000000   | 	jg mcloop
0x505:                      | checkpre:
                            | 	# Check for corruption
0x505: 30f29005000000000000 | 	irmovq Predest,%rdx
0x50f: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x519: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x523: 6120                 | 	subq %rdx,%rax
0x525: 734105000000000000   | 	je checkpost
0x52e: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x538: 708705000000000000   | 	jmp cdone
0x541:                      | checkpost:
                            | 	# Check for corruption
0x541: 30f29805000000000000 | 	irmovq Postdest,%rdx
0x54b: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x555: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x55f: 6120                 | 	subq %rdx,%rax
0x561: 737d05000000000000   | 	je checkok
0x56a: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x574: 708705000000000000   | 	jmp cdone
0x57d:                      | checkok:
                            | 	# Successful checks
0x57d: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x587:                      | cdone:
0x587: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x588:                      | 	.align 8
0x588:                      | src:
0x588: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x590:                      | 	.align 16
0x590:                      | Predest:
0x590: fadebc0000000000     | 	.quad 0xbcdefa
0x598:                      | dest:
0x598:                      | Postdest:
0x598: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5a0:                      | .align 8
                            | # Run time stack
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
                            | 
0x620:                      | Stack:
